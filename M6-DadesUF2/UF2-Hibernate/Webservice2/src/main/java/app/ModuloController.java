package app;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/ies/modulo") // This means URL's start with /demo (after Application path)
public class ModuloController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private ModuloRepository repository;
	
	
	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam int id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		Modulo m = new Modulo();
		m.setIdModulo(id);
		m.setNombre(name);
		repository.save(m);
		return "Saved";
	}
	
	@GetMapping(path="/user/{id}")
	public @ResponseBody Modulo getUser(@PathVariable int id) {
		Optional<Modulo> user = repository.findById(id);

		return user.get();
	}
	
	@GetMapping(path="/bb")
	public @ResponseBody Iterable<Modulo> getAllUsers2() {
		// This returns a JSON or XML with the users
		return repository.findAll();
	}

	
	@GetMapping(path="/all")
	public @ResponseBody Iterable<Modulo> getAllUsers() {
		// This returns a JSON or XML with the users
		return repository.findAll();
	}
}
